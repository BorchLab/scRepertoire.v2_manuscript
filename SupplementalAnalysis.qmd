---
title: "Supplemental Analysis"
format: html
editor: visual
---

```{r message=FALSE, warning=FALSE, echo=T, results='hide'}
# Define required libraries
packages <- c(
  "Azimuth", "BiocParallel", "celldex", "dplyr", "ggplot2", 
  "ggthemes", "harmony", "igraph", "patchwork", "RColorBrewer", 
  "scDblFinder", "scGate", "scRepertoire", "scran", "Seurat", 
  "SeuratData", "SingleR", "stringr", "viridis"
)

# Suppress startup messages
suppressPackageStartupMessages(
  lapply(packages, library, character.only = TRUE)
)

# Load annotation references if not already present
if (!exists("HPCA")) {
  HPCA <- celldex::HumanPrimaryCellAtlasData()
}
if (!exists("Monaco")) {
  Monaco <- celldex::MonacoImmuneData()
}

# Set options
options(future.globals.maxSize = 8000 * 1024^2)

# Define custom negate function
"%!in%" <- Negate("%in%")
```

### Directory Setup

```{r}
# Define directories
qc_dir <- "./qc"
input_dir <- "./inputs/supplemental/additionalCohorts/Paley2024_AllCells"
output_dir <- "./output"
processed_dir <- "./inputs/supplemental/processedData/Paley"

# Create directories if they do not exist
dir.create(qc_dir, showWarnings = FALSE)
dir.create(output_dir, showWarnings = FALSE)
dir.create(processed_dir, showWarnings = FALSE)
```

### Helper Functions

```{r}
# Save plots with consistent formatting
save_plot <- function(plot, filename, height = 3, width = 3, dpi = 300) {
  ggsave(filename = filename, plot = plot, height = height, width = width, 
         dpi = dpi)
}

# Calculate QC metrics
calculate_qc_metrics <- function(seurat_obj) {
  seurat_obj$nCount_RNA <- colSums(seurat_obj@assays$RNA@layers$counts)
  seurat_obj$nFeature_RNA <- colSums(seurat_obj@assays$RNA@layers$counts != 0)
  seurat_obj[["mito.genes"]] <- PercentageFeatureSet(seurat_obj, 
                                                     pattern = "^MT-")
  seurat_obj[["ribo.genes"]] <- PercentageFeatureSet(seurat_obj, 
                                                     pattern = "^RPS|RPL-")
  return(seurat_obj)
}

# Plot QC metrics
plot_qc_metrics <- function(seurat_obj, file_name, qc_dir) {
  p <- VlnPlot(
    object = seurat_obj,
    features = c("nCount_RNA", "nFeature_RNA", "mito.genes", "ribo.genes"),
    pt.size = 0,
    cols = "grey"
  ) +
    theme_minimal() +
    theme(legend.position = "none") +
    plot_layout(ncol = 2)

  save_plot(p, 
            file.path(qc_dir, paste0(file_name, "_metrics.pdf")), 
            height = 8, 
            width = 8)
}

# Filter cells based on QC metrics
filter_cells <- function(seurat_obj, file_name, qc_dir) {
  standev <- sd(log(seurat_obj$nFeature_RNA)) * 2
  mean_val <- mean(log(seurat_obj$nFeature_RNA))
  cut <- round(exp(standev + mean_val))

  p <- FeatureScatter(seurat_obj, 
                      feature1 = "nCount_RNA", 
                      feature2 = "nFeature_RNA") +
    geom_hline(yintercept = cut)

  save_plot(p, file.path(qc_dir, 
                         paste0(file_name, "_cutpoint.pdf")), 
            height = 8, 
            width = 8)

  seurat_obj <- subset(seurat_obj, 
                       subset = mito.genes < 10 & nFeature_RNA < cut)
  return(seurat_obj)
}
```

### Plot Standardization

```{r}
custom_theme <- theme_minimal(base_size = 8) +
  theme(
    axis.title = element_text(size = 8, color = "black"),
    axis.text = element_text(size = 6, color = "black"),
    legend.text = element_text(size = 4, color = "black"),
    legend.key.size = unit(0.1, "cm"),
    legend.title = element_text(size = 4, color = "black"),
    legend.position = c(1, 1),
    legend.justification = c("right", "top"),
    legend.box.just = "right",
    legend.margin = margin(6, 6, 6, 6),
    legend.spacing.y = unit(2, "cm")
  )
```

## Processing Sequencing Runs

```{r  message=FALSE, warning=FALSE, eval = FALSE}
# Setup
dir.create("./qc", showWarnings = FALSE)
file_list <- list.files("./inputs/supplemental/additionalCohorts/Paley2024_AllCells/RNA", full.names = FALSE) 

# Helper functions
calculate_qc_metrics <- function(seurat_obj) {
  seurat_obj$nCount_RNA <- colSums(seurat_obj@assays$RNA@layers$counts)
  seurat_obj$nFeature_RNA <- colSums(seurat_obj@assays$RNA@layers$counts != 0)
  seurat_obj[["mito.genes"]] <- PercentageFeatureSet(seurat_obj, 
                                                     pattern = "^MT-")
  seurat_obj[["ribo.genes"]] <- PercentageFeatureSet(seurat_obj, 
                                                     pattern = "^RPS|RPL-")
  return(seurat_obj)
}

plot_qc_metrics <- function(seurat_obj, file_name) {
  p <- VlnPlot(
    object = seurat_obj,
    features = c("nCount_RNA", "nFeature_RNA", "mito.genes", "ribo.genes"),
    pt.size = 0,
    cols = "grey"
  ) +
    theme(legend.position = "none") +
    plot_layout(ncol = 2)
  ggsave(paste0("./qc/", file_name, "_metrics.pdf"), 
         plot = p, 
         height = 8, 
         width = 8)
}

filter_cells <- function(seurat_obj, file_name) {
  standev <- sd(log(seurat_obj$nFeature_RNA)) * 2
  mean_val <- mean(log(seurat_obj$nFeature_RNA))
  cut <- round(exp(standev + mean_val))
  
  p <- FeatureScatter(seurat_obj, 
                      feature1 = "nCount_RNA", 
                      feature2 = "nFeature_RNA") +
    geom_hline(yintercept = cut)
  ggsave(paste0("./qc/", file_name, "_cutpoint.pdf"), 
         plot = p, 
         height = 8, 
         width = 8)
  
  seurat_obj <- subset(seurat_obj, 
                       subset = mito.genes < 10 & nFeature_RNA < cut)
  return(seurat_obj)
}

annotate_with_singler <- function(sce, ref, ref_name) {
  com.res <- SingleR(sce, 
                     ref = ref, 
                     labels = ref$label.fine, 
                     assay.type.test = 1)
  df <- data.frame("labels" = com.res$labels, 
                   "pruned.labels" = com.res$pruned.labels)
  rownames(df) <- rownames(com.res)
  colnames(df) <- paste0(ref_name, ".", colnames(df))
  return(df)
}

# Download and prepare reference datasets if not already present
if (!exists("HPCA")) {
  HPCA <- celldex::HumanPrimaryCellAtlasData()
}
if (!exists("Monaco")) {
  Monaco <- celldex::MonacoImmuneData()
}

# Main processing loop
for (file in file_list) {
  message("Processing ", file)
  
  # 1. Read Data and Create Seurat Object
  tmp <- Read10X(paste0(input_dir, "/RNA/", 
                        file))
  
  SeuratObj <- CreateSeuratObject(counts = tmp, 
                                  assay = "RNA", 
                                  project = file) 
  
  # Remove tmp to free up memory
  rm(tmp)
  
  # 2. Calculate QC Metrics and Rename Cells
  SeuratObj <- calculate_qc_metrics(SeuratObj) %>%
    subset(subset = nFeature_RNA > 100) # Filter out low feature cells early
  SeuratObj <- RenameCells(SeuratObj, new.names = 
                             paste0(file, "_", colnames(SeuratObj)))

  # 3. Plot QC Metrics
  plot_qc_metrics(SeuratObj, file)

  # 4. Filter Cells
  SeuratObj <- filter_cells(SeuratObj, file)

  # 5. Estimate Doublets
  sce <- as.SingleCellExperiment(SeuratObj)
  sce <- scDblFinder(sce)
  doublets <- data.frame(db.class = sce$scDblFinder.class, 
                         db.score = sce$scDblFinder.score)
  rownames(doublets) <- rownames(sce@colData)
  SeuratObj <- AddMetaData(SeuratObj, doublets)

  # 6. Azimuth Annotation
  AzAnnotation <- RunAzimuth(SeuratObj, reference = "pbmcref", verbose = FALSE)
  SeuratObj <- AddMetaData(SeuratObj, AzAnnotation[[]])
  
  # 7. SingleR Annotation
  SeuratObj <- AddMetaData(SeuratObj, 
                           annotate_with_singler(sce, HPCA, "HPCA"))
  SeuratObj <- AddMetaData(SeuratObj, 
                           annotate_with_singler(sce, Monaco, "Monaco"))
  
  rm(sce)

  # 8. Add Clonal Information
  TCR.file <- list.files(paste0("./inputs/supplemental/additionalCohorts/Paley2024_AllCells/TCR/", 
                                file), pattern = "annotations")[1]
  TCR.file <- read.csv(paste0("./inputs/supplemental/additionalCohorts/Paley2024_AllCells/TCR/", 
                              file, "/", TCR.file))
  combinedTCR <- combineTCR(TCR.file, samples = file, filterMulti = TRUE)


  SeuratObj <- combineExpression(combinedTCR, 
                                 SeuratObj, 
                                 cloneCall = "strict", 
                                 proportion = TRUE)

  # 9. scGate Filtering
  suppressWarnings({
    scGateModelDb <- get_scGateDB("data/scGateDB") 
  })
  DefaultAssay(SeuratObj) <- "RNA"
  SeuratObj <- scGate(SeuratObj,
                      slot = "counts", 
                      scGateModelDb$human$generic)

  cells.to.keep <- which(SeuratObj$is.pure_Tcell == "Pure" )
  clones.recovered <- which(!is.na(SeuratObj$CTaa))
  cells.to.keep <- intersect(cells.to.keep, clones.recovered)
  SeuratObj <- subset(SeuratObj, cells = colnames(SeuratObj)[cells.to.keep])

  # 10. Save Preliminary Seurat Object
  saveRDS(SeuratObj, paste0("./inputs/supplemental/processedData/Paley", file, ".rds"))
  rm(SeuratObj)
  gc()
}
```
