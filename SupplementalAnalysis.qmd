---
title: "Supplemental Analysis"
format: html
editor: visual
---

## Loading Library and Functions

```{r message=FALSE, warning=FALSE, echo=T, results='hide'}
# Define required libraries
packages <- c(
  "Azimuth", "BiocParallel", "celldex", "dplyr", "ggplot2", 
  "ggthemes", "harmony", "igraph", "patchwork", "RColorBrewer", 
  "scDblFinder", "scGate", "scRepertoire", "scran", "Seurat", 
  "SeuratData", "SingleR", "stringr", "viridis"
)

# Suppress startup messages
suppressPackageStartupMessages(
  lapply(packages, library, character.only = TRUE)
)

# Load annotation references if not already present
if (!exists("HPCA")) {
  HPCA <- celldex::HumanPrimaryCellAtlasData()
}
if (!exists("Monaco")) {
  Monaco <- celldex::MonacoImmuneData()
}

# Set options
options(future.globals.maxSize = 8000 * 1024^2)

# Define custom negate function
"%!in%" <- Negate("%in%")

# Load General Helper Functions
source("R/helper.R")
source("R/processing.R")
```

## Paley Cohort

### Directory Setup

```{r}
# Define directories
qc_dir <- "./qc"
input_dir <- "./inputs/supplemental/additionalCohorts/Paley2024_AllCells"
output_dir <- "./output"
processed_dir <- "./inputs/supplemental/processedData/Paley"

# Create directories if they do not exist
dir.create(qc_dir, showWarnings = FALSE)
dir.create(output_dir, showWarnings = FALSE)
dir.create(processed_dir, showWarnings = FALSE)
```

### Processing Sequencing Runs

```{r  message=FALSE, warning=FALSE, eval = FALSE}
# Setup
dir.create("./qc", showWarnings = FALSE)
file_list <- list.files("./inputs/supplemental/additionalCohorts/Paley2024_AllCells/RNA", full.names = FALSE) 

# Main processing loop
for (file in file_list) {
  message("Processing ", file)
  
  # 1. Read Data and Create Seurat Object
  tmp <- Read10X(paste0(input_dir, "/RNA/", 
                        file))
  
  SeuratObj <- CreateSeuratObject(counts = tmp, 
                                  assay = "RNA", 
                                  project = file) 
  
  # Remove tmp to free up memory
  rm(tmp)
  
  # 2. Calculate QC Metrics and Rename Cells
  SeuratObj <- calculate_qc_metrics(SeuratObj) %>%
    subset(subset = nFeature_RNA > 100) # Filter out low feature cells early
  SeuratObj <- RenameCells(SeuratObj, new.names = 
                             paste0(file, "_", colnames(SeuratObj)))

  # 3. Plot QC Metrics
  plot_qc_metrics(SeuratObj, file)

  # 4. Filter Cells
  SeuratObj <- filter_cells(SeuratObj, file)

  # 5. Estimate Doublets
  sce <- as.SingleCellExperiment(SeuratObj)
  sce <- scDblFinder(sce)
  doublets <- data.frame(db.class = sce$scDblFinder.class, 
                         db.score = sce$scDblFinder.score)
  rownames(doublets) <- rownames(sce@colData)
  SeuratObj <- AddMetaData(SeuratObj, doublets)

  # 6. Azimuth Annotation
  AzAnnotation <- RunAzimuth(SeuratObj, reference = "pbmcref", verbose = FALSE)
  SeuratObj <- AddMetaData(SeuratObj, AzAnnotation[[]])
  
  # 7. SingleR Annotation
  SeuratObj <- AddMetaData(SeuratObj, 
                           annotate_with_singler(sce, HPCA, "HPCA"))
  SeuratObj <- AddMetaData(SeuratObj, 
                           annotate_with_singler(sce, Monaco, "Monaco"))
  
  rm(sce)

  # 8. Add Clonal Information
  TCR.file <- list.files(paste0("./inputs/supplemental/additionalCohorts/Paley2024_AllCells/TCR/", 
                                file), pattern = "annotations")[1]
  TCR.file <- read.csv(paste0("./inputs/supplemental/additionalCohorts/Paley2024_AllCells/TCR/", 
                              file, "/", TCR.file))
  combinedTCR <- combineTCR(TCR.file, samples = file, filterMulti = TRUE)


  SeuratObj <- combineExpression(combinedTCR, 
                                 SeuratObj, 
                                 cloneCall = "strict", 
                                 proportion = TRUE)

  # 9. scGate Filtering
  suppressWarnings({
    scGateModelDb <- get_scGateDB("data/scGateDB") 
  })
  DefaultAssay(SeuratObj) <- "RNA"
  SeuratObj <- scGate(SeuratObj,
                      slot = "counts", 
                      scGateModelDb$human$generic)

  cells.to.keep <- which(SeuratObj$is.pure_Tcell == "Pure" )
  clones.recovered <- which(!is.na(SeuratObj$CTaa))
  cells.to.keep <- intersect(cells.to.keep, clones.recovered)
  SeuratObj <- subset(SeuratObj, cells = colnames(SeuratObj)[cells.to.keep])

  # 10. Save Preliminary Seurat Object
  saveRDS(SeuratObj, paste0("./inputs/supplemental/processedData/Paley", file, ".rds"))
  rm(SeuratObj)
  gc()
}
```

### Integrating and Reducing Data

```{r}
# 1. Read and merge data
files <- list.files("./inputs/supplemental/processedData/Paley", full.names = TRUE)

object.list <- lapply(files, function(file) {
  readRDS(file)
})

# Use reduce to merge
object.merge <- Reduce(function(x, y) merge(x, y), object.list)
rm(object.list)
gc()

# 2. Preprocessing and Integration
object.merge <- object.merge %>%
  NormalizeData(verbose = FALSE) %>%
  FindVariableFeatures(nfeatures = 2500, verbose = FALSE) %>%
  Trex::quietTCRgenes() %>% # Corrected function call using quietly
  ScaleData(verbose = FALSE, 
            vars.to.regress = c("mito.genes")) %>%
  RunPCA(verbose = FALSE) %>%
  RunHarmony("orig.ident", verbose = FALSE)

# 3. Clustering and Visualization
object.merge <- object.merge %>%
  RunUMAP(reduction = "harmony", 
          dims = 1:30, 
          reduction.name = "umap.harmony", 
          verbose = FALSE) %>%
  FindNeighbors(dims = 1:30, 
                reduction = "harmony", 
                verbose = FALSE) %>%
  FindClusters(algorithm = 4, 
               resolution = 0.6,
               verbose = FALSE)

# 4. Defining Cell Types By Cluster
cluster.types <- c("CD4_TCM/Naive", 
                   "CD4_T1_Inf_Stimulated", 
                   "CD4_TH17", 
                   "CD8_Exhausted", 
                   "CD4_Treg", 
                   "CD8_TEM",
                   "CD8_CTL", 
                   "B Cells", 
                   "CD8_TCM/Naive", 
                   "CD4/CD8_Proliferating", 
                   "MAIT", 
                   "Plasma_Cell", 
                   "CD4_TEM", 
                   "Plasma_Cell", 
                   "CD4_TEM")
cluster.types <- setNames(cluster.types, as.character(1:15))
object.merge$Cluster_Types <- recode(as.character(object.merge$seurat_clusters),
                                     !!!cluster.types)

# 5. Defining Tissue Type 
object.merge$Tissue <- ifelse(grepl("Aqueous", object.merge$orig.ident), "Eye", "PBMC")

# 6. Adding patient information
object.merge$Patient <- str_split(object.merge$orig.ident, "_", simplify = TRUE)[,1]

# 7. Adding pathogenic T cell annotation
TRB <- str_split(object.merge$CTaa, "_", simplify = TRUE)[,2]
TRB.index <- grep("SYST|TYST|TFST|YYST|GYST|LYST", TRB)
TRA.index <- grep("TRAV21", object.merge$CTgene) #Must Contain TRAV21

pathogenic.cells <- intersect(TRA.index, TRB.index)

object.merge$pathogenic.cells <- "No"
object.merge$pathogenic.cells[pathogenic.cells] <- "Yes"

# Save final integrated object
saveRDS(object.merge, "./output/data/Supplemental_PaleyCohort.rds")
```

### Visualizations

```{r}
object.merge <- readRDS("./output/data/Supplemental_PaleyCohort.rds")

CellDimPlot(object.merge, 
            group_by = "seurat_clusters",
            reduction = "umap.harmony",
            label_insitu = TRUE,
            pt.size = 0.1,
            show_stat = FALSE,
            label = TRUE,
            raster = FALSE) + 
  guides(color = "none") + 
  theme_void()
ggsave("output/viz/SupplementalFig2A.png", height = 3, width = 3.5, dpi = 600)

CellDimPlot(object.merge, 
            group_by = "seurat_clusters",
            reduction = "umap.harmony",
  highlight = 'pathogenic.cells == "Yes"',
  raster = FALSE,
  show_stat = FALSE)+ 
  guides(color = "none") + 
  theme_void()
ggsave("output/viz/SupplementalFig2B_1.png", height = 3, width = 3.5, dpi = 600)

CellStatPlot(object.merge, 
             group_by = "pathogenic.cells", 
             frac = "group",
             swap = TRUE, 
             position = "stack") + 
  guides(fill = "none")
ggsave("output/viz/SupplementalFig2B_2.pdf", height = 3, width = 2,)

CellStatPlot(object.merge, 
             ident = "Patient",  
             group_by = "pathogenic.cells", 
             frac = "group",
             swap = TRUE, 
             position = "stack") + 
  guides(fill = "none")

positionalProperty(object.merge, 
          group.by = "pathogenic.cells",
          chain = "TRB", 
          aa.length = 20)

# Conventional T Cell Markers
genes <- c("CD4", "CD8A", "CCR7", "SELL",  "CD28", 
                              "CD44", "CD69", "CTLA4", "CXCR3", 
                              "FOXP3", "GZMB", "IL2RA", "IL7R", 
                            "KLRB1", "PDCD1", "PRF1", "CTLA4", "PDCD1", "CD69", "MKI67")


FeaturePlot(object.merge, 
                feature = genes) & scale_color_viridis() & theme_void() & guides(color = "none")
#ggsave("output/viz/Tmarkers_UMAP.png", height = 12, width = 16, dpi = 300)
```

## Borcherding Cohort

### Directory Setup

```{r}
# Define directories
qc_dir <- "./qc"
input_dir <- "./inputs/supplemental/additionalCohorts/Borcherding2024/"
output_dir <- "./output/"
processed_dir <- "./inputs/supplemental/processedData/Borcherding/"

# Create directories if they do not exist
dir.create(qc_dir, showWarnings = FALSE)
dir.create(output_dir, showWarnings = FALSE)
dir.create(processed_dir, showWarnings = FALSE)
```

### Processing Sequencing Runs

```{r  message=FALSE, warning=FALSE, eval = FALSE}
# Setup
dir.create("./qc", showWarnings = FALSE)
file_list <- list.files("./inputs/supplemental/additionalCohorts/Borcherding2024", full.names = FALSE) 

# Main processing loop
for (file in file_list) {
  message("Processing ", file)
  
  # 1. Read Data and Create Seurat Object
  tmp <- Read10X(paste0(input_dir, file, "/filtered_feature_bc_matrix"))
  
  SeuratObj <- CreateSeuratObject(counts = tmp, 
                                  assay = "RNA", 
                                  project = file) 
  
  # Remove tmp to free up memory
  rm(tmp)
  
  # 2. Calculate QC Metrics and Rename Cells
  SeuratObj <- calculate_qc_metrics(SeuratObj) %>%
    subset(subset = nFeature_RNA > 100) # Filter out low feature cells early
  SeuratObj <- RenameCells(SeuratObj, new.names = 
                             paste0(file, "_", colnames(SeuratObj)))

  # 3. Plot QC Metrics
  plot_qc_metrics(SeuratObj, file)

  # 4. Filter Cells
  SeuratObj <- filter_cells(SeuratObj, file)

  # 5. Estimate Doublets
  sce <- as.SingleCellExperiment(SeuratObj)
  sce <- scDblFinder(sce)
  doublets <- data.frame(db.class = sce$scDblFinder.class, 
                         db.score = sce$scDblFinder.score)
  rownames(doublets) <- rownames(sce@colData)
  SeuratObj <- AddMetaData(SeuratObj, doublets)

  # 6. Azimuth Annotation
  AzAnnotation <- RunAzimuth(SeuratObj, reference = "pbmcref", verbose = FALSE)
  SeuratObj <- AddMetaData(SeuratObj, AzAnnotation[[]])
  
  # 7. SingleR Annotation
  SeuratObj <- AddMetaData(SeuratObj, 
                           annotate_with_singler(sce, HPCA, "HPCA"))
  SeuratObj <- AddMetaData(SeuratObj, 
                           annotate_with_singler(sce, Monaco, "Monaco"))
  
  rm(sce)

  # 8. Add Clonal Information
  TCR.file <- list.files(paste0("./inputs/supplemental/additionalCohorts/Borcherding2024/", 
                                file), pattern = "annotations")[1]
  TCR.file <- read.csv(paste0("./inputs/supplemental/additionalCohorts/Borcherding2024/", 
                              file, "/", TCR.file))
  combinedTCR <- combineTCR(TCR.file, 
                            samples = file, 
                            filterMulti = TRUE)


  SeuratObj <- combineExpression(combinedTCR, 
                                 SeuratObj, 
                                 cloneCall = "strict", 
                                 proportion = TRUE)

  # 9. scGate Filtering
  suppressWarnings({
    scGateModelDb <- get_scGateDB("data/scGateDB") 
  })
  DefaultAssay(SeuratObj) <- "RNA"
  SeuratObj <- scGate(SeuratObj,
                      slot = "counts", 
                      scGateModelDb$human$generic)

  cells.to.keep <- which(SeuratObj$is.pure_Tcell == "Pure" )
  clones.recovered <- which(!is.na(SeuratObj$CTaa))
  cells.to.keep <- intersect(cells.to.keep, clones.recovered)
  SeuratObj <- subset(SeuratObj, cells = colnames(SeuratObj)[cells.to.keep])

  # 10. Save Preliminary Seurat Object
  saveRDS(SeuratObj, paste0("./inputs/supplemental/processedData/Borcherding", file, ".rds"))
  rm(SeuratObj)
  gc()
}
```

### Integrating and Reducing Data

```{r}
# 1. Read and merge data
files <- list.files("./inputs/supplemental/processedData/Borcherding", full.names = TRUE)

object.list <- lapply(files, function(file) {
  readRDS(file)
})

# Use reduce to merge
object.merge <- Reduce(function(x, y) merge(x, y), object.list)
rm(object.list)
gc()

# 2. Preprocessing and Integration
object.merge <- object.merge %>%
  NormalizeData(verbose = FALSE) %>%
  FindVariableFeatures(nfeatures = 2500, verbose = FALSE) %>%
  Trex::quietTCRgenes() %>% # Corrected function call using quietly
  ScaleData(verbose = FALSE, 
            vars.to.regress = c("mito.genes")) %>%
  RunPCA(verbose = FALSE) %>%
  RunHarmony("orig.ident", verbose = FALSE)

# 3. Clustering and Visualization
object.merge <- object.merge %>%
  RunUMAP(reduction = "harmony", 
          dims = 1:30, 
          reduction.name = "umap.harmony", 
          verbose = FALSE) %>%
  FindNeighbors(dims = 1:30, 
                reduction = "harmony", 
                verbose = FALSE) %>%
  FindClusters(algorithm = 4, 
               resolution = 0.4,
               verbose = FALSE)

# 4. Defining Cell Types By Cluster
#cluster.types <- c("CD4_TCM/Naive", 
#                   "CD4_T1_Inf_Stimulated", 
#                   "CD4_TH17", 
#                   "CD8_Exhausted", 
#                   "CD4_Treg", 
#                   "CD8_TEM",
#                   "CD8_CTL", 
#                   "B Cells", 
#                   "CD8_TCM/Naive", 
#                   "CD4/CD8_Proliferating", 
#                   "MAIT", 
#                   "Plasma_Cell", 
#                   "CD4_TEM", 
#                   "Plasma_Cell", 
#                   "CD4_TEM")
#cluster.types <- setNames(cluster.types, as.character(1:15))
#object.merge$Cluster_Types <- recode(as.character(object.merge$seurat_clusters),
#                                     !!!cluster.types)

# 5. Adding epitope-specific sequences
#----------------------------------------
# Spike 167–180 Epitope Matching
#----------------------------------------

# Load known specific TCR sequences for the S167-180 epitope
seq_167_180 <- read.csv("./inputs/supplemental/Spike.Epitope.Sequences.csv")

# Split CTaa column into alpha and beta chains
CTaa <- as.data.frame(str_split(object.merge$CTaa, "_", simplify = TRUE))
colnames(CTaa) <- c("CDR3a", "CDR3b")

# Match to known sequences
match_alpha_167 <- which(CTaa$CDR3a %in% seq_167_180$cdr3a)
match_beta_167  <- which(CTaa$CDR3b %in% seq_167_180$cdr3b)

# Annotate specificity
object.merge$TCRA.S167.180 <- NA
object.merge$TCRA.S167.180[match_alpha_167] <- "Specific"

object.merge$TCRB.S167.180 <- NA
object.merge$TCRB.S167.180[match_beta_167] <- "Specific"

object.merge$Spike.Specific <- "No"
object.merge$Spike.Specific[grep("Specific", object.merge$TCRB.S167.180)] <- "Yes"
object.merge$Spike.Specific[grep("Specific", object.merge$TCRA.S167.180)] <- "Yes"

# Save final integrated object
saveRDS(object.merge, "./output/data/Supplemental_BorcherdingCohort.rds")
```
